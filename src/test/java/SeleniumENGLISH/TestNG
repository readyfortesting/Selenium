* ====TestNG=====
=>  It is an automation framework type.

=> TestNG is an open source, new generation and  advance version of JUnit.
=> Everything in junit is also in TestNG (Assertions,logic,annotation,@Before @After annotations)
=> TestNG is specifically for testers, developers usually use JUnit for their unit testing, testers are using TestNG fot automation testing
=> TestNG has more annotation,more feature, more assertion types
=> TestNG has soft Assertion but JUnit doesn't have.
=> TestNG works only with Java and requires JDK 7 or higher.
=> We can have more control with TestNG,MORE FLEXIBILITY, MORE ANNOTATIONS.
=> Grouping test cases.
=> Useful HTML, or xml reports.
=> Data Driven Testing with excel or data provider we will learn in TestNG

=> Why we learn testNG??
 TestNG is more popular and has more features

LET'S LEARN TESTNG ANNOTATIONS

=>    @Test : Creates test case.
=>    @BeforeMethod : This runs Before each @Test annotation. Same as @Before annotation in JUnit.
=>    @AfterMethod : This runs after each @Test annotation.  Same as @After annotation in JUnit.
=>    @Ignore : For example I don't want to run test2() we use @Ignore annotation.
=>    @Test(enabled = false) : it means DISABLE. You cannot run this test ANYMORE! It removes run button!
=>    @Test(Priority) : TestNG runs in ALPHABETICAL ORDER. We use priority to order test cases.

  ****   WHY DO YOU NEED @BeforeMethod? *****
  => Pre conditions: Create driver, implicitly Wait,maximize Window, it is used TO AVOID REPETITION.

  ****   WHY DO YOU NEED @AfterMethod? *****
  => Post conditions : Closing driver, reports generation, close=quit driver, it is  also used TO AVOID REPETITION.

    ****   WHY DO YOU NEED @Test annotation? *****
  => To create test scripts (test cases)

     ASSERTION
     Hard asserion > if hard assertion fails,remaining test cases will not run.
      // import org.testng.Assert;    This is HARD ASSERT !!

     // Hard assert fails, and next line will not RUN!!
    // Testers usually use hard assertions, because if something is wrong we don't have to continue.

    *** BE CAREFULL when you use soft assertion! Use at the end  softAssert.assertAll(); !!!

    -> 1. create a SoftAssert object
           SoftAssert softAssert=new SoftAssert();  // it comes from TestNG

     SoftAssert=>  If soft assert fails,the test case will continue to run.


      -> At the end we must use assertAll(); to check which one pass which one fails.
         softAssert.assertAll();  //it acctually does the ASSERTION and shows which one is pass which one is fails!


         (1)=>     What is  SOFT ASSERTION??? => Verifying all test cases using soft assertion.
          In this type of assertion, we use soft assert object. It is like if else statement, if the test fails it continue.
          This will not throw exception!
          We also use at the end assertAll() to actually see if any soft assert fails.

        (2)=>  What is the difference between hard and soft assertion??
          Hard Assert: If hard assert fails, the test case will not continue to run.
          Soft assert: If soft assert fails, the test case will continue to run. We must create SoftAssert object to use soft assert.



 */